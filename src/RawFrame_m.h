//
// Generated file, do not edit! Created by opp_msgtool 6.0 from RawFrame.msg.
//

#ifndef __RAWFRAME_M_H
#define __RAWFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class RawFrame;
/**
 * Class generated from <tt>RawFrame.msg:16</tt> by opp_msgtool.
 * <pre>
 * packet RawFrame
 * {
 *     \@customize(true);
 *     // frame data
 *     int M_header;        // the seuqnce number
 *     string M_payload;    // the message content
 *     string M_Trailer;    // the CRC
 *     int M_Type;          // type: 2 = Data, 1 = ACK, 0 = NACK
 *     int M_Target;        // target ACK / NACK value
 * 
 *     // my data
 *     int dup_index;
 *     int modified_bit;
 *     bool is_lost;
 *     double channel_delay;
 * }
 * </pre>
 *
 * RawFrame_Base is only useful if it gets subclassed, and RawFrame is derived from it.
 * The minimum code to be written for RawFrame is the following:
 *
 * <pre>
 * class RawFrame : public RawFrame_Base
 * {
 *   private:
 *     void copy(const RawFrame& other) { ... }

 *   public:
 *     RawFrame(const char *name=nullptr, short kind=0) : RawFrame_Base(name,kind) {}
 *     RawFrame(const RawFrame& other) : RawFrame_Base(other) {copy(other);}
 *     RawFrame& operator=(const RawFrame& other) {if (this==&other) return *this; RawFrame_Base::operator=(other); copy(other); return *this;}
 *     virtual RawFrame *dup() const override {return new RawFrame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from RawFrame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(RawFrame)
 * </pre>
 */
class RawFrame_Base : public ::omnetpp::cPacket
{
  protected:
    int M_header = 0;
    omnetpp::opp_string M_payload = "";
    omnetpp::opp_string M_Trailer = "";
    int M_Type = 0;
    int M_Target = 0;

    int dup_index = 0;
    int modified_bit = -1;
    bool is_lost = false;
    double channel_delay = 0;

  private:
    void copy(const RawFrame_Base& other);

  protected:
    bool operator==(const RawFrame_Base&) = delete;

    // make assignment operator protected to force the user override it
    RawFrame_Base& operator=(const RawFrame_Base& other);

  public:
    RawFrame_Base(const char *name=nullptr, short kind=0);
    RawFrame_Base(const RawFrame_Base& other);

    virtual ~RawFrame_Base();
    virtual RawFrame_Base *dup() const override;
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getM_header() const;
    virtual void setM_header(int M_header);

    virtual const char * getM_payload() const;
    virtual void setM_payload(const char * M_payload);

    virtual const char * getM_Trailer() const;
    virtual void setM_Trailer(const char * M_Trailer);

    virtual int getM_Type() const;
    virtual void setM_Type(int M_Type);

    virtual int getM_Target() const;
    virtual void setM_Target(int M_Target);

    virtual int getDup_index() const;
    virtual void setDup_index(int dup_index);

    virtual int getModified_bit() const;
    virtual void setModified_bit(int modified_bit);

    virtual bool getIs_lost() const;
    virtual void setIs_lost(bool is_lost);

    virtual double getChannel_delay() const;
    virtual void setChannel_delay(double channel_delay);
};


namespace omnetpp {

template<> inline RawFrame_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<RawFrame_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __RAWFRAME_M_H

